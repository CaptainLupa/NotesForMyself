5/25/21 - I am starting over on Chernos Game Engine Series.  I need to take this semi
seriously if I want to ever do this as a career.  OpenGL may not be the best or most
efficient api ever made, but it is a fantastic starting point.

Over the summer I hope to get through a good chunk of Lord Chernos knowledge and make
JesterEngine a real thing.

Idk why I chose the name Jester, it just seemed cool I guess.

Ok I'm gonna start the first video now.  Good luck me!



--------------------------------------------------------------------------------



Video 1 - What is a game Engine?
Platform for developers and content creators to make games or 3d applications.
Doesn't even have to be a game.
Unreal and Unity can be made for VR apps and movie graphics.
All applications are just different ways of viewing data.

Cherno Definition - A way to transform data from one form to another.
read files, show it as something else.
provide a way to interact with that data.

Game engines can have own versions of obj and jpg etc... used for optimization
Many many systems in a game engine.
Platform Abstraction systems, Windows Max Linux and console specific parts.

You can write code that is generalized for all systems like a c++ template.

i.e. ->

template<systemname SN>
runOnSystem(SN);

runOnSystem(XboxSX);
runOnSystem(PS5);
runOnSystem(MAC);
etc...

This is wrong btw...

its more like uhhhhhhhhhhhmmmmmmmmmmmm


hmmmm

#ifdef XBOXSX
runOnSystem(XboxSx);
#endif

yeah thats more accurate I think...



--------------------------------------------------------------------------------

Alright that's video one done.  Very neat.

Good to look at what a game engine is on a really high level to simplify the stuff
that I'll be doing at some point.

ok video 2 time yeehaw mothefuckers... who is reading this it's just me you cumwad...

--------------------------------------------------------------------------------

Video 2 - Designing our game engine.

I lied im taking a shower now i am stinky boi

9:22pm leaving...

9:42 I return

hehe

perfect timing lel

ok Video 2.

I should really subscribe to https://www.patreon.com/thecherno ;)))))))))))

wowow game engine is hard WOOOWWWW
lol

ok ill stop


Entry Point
	- What happens when game made with Engine is launched.
	- What controls what happens

Application Layer
	- Input events, window Resize events, all types of events are  handled in the App Layer.
	- All the things that the app wants to do with the game engine are put through the
	Application Layer.
	- Basically a link from App made with engine, to the actual engine software.

Window Layer
	- Only exists on desktop platforms, Mac, Windows, Linux.
	- On mobile platforms, you are more given a surface or an app than creating the whole thing
	from scratch.
		- Input
			- Where is the mouse?
			- Is the space bar currently pressed
			- State checking is in here too
		- Events
			-When an event happens, engine is notified and stuff happens

Renderer
	- Biggest and most complicated thing in the engine.
	- Easier to make once all the above systems are built and implemented.

Render API Abstraction
	- Support multiple rendering API's in engine
	- at first, only openGL.

Debugging Support
	- Need ways to see what's going on in the program.
	- Logging systems
	- In the engine and not just break points in VS

Scripting language

Memory Systems
	- Custom Allocators
	- For performance

Entity Component System(ECS)
	- Way to create game objects in the world that have systems or behavior

Physics

File I/O

Virtual File System

Build System
	- own format of files
	- Fart.jester

--------------------------------------------------------------------------------

Yoho yoho video 2 done.

Good to have layout.

bro these Rahas reflection questions hit different in Atom Open Source Text Editor :coom:

--------------------------------------------------------------------------------

Video 3 - Project Setup

Create JesterEngine project

Delete 32bit platforms
	- In Project properties, under platform, go to configuration manager.
	- Remove both x86 and win32 wherever you see it, leave x64.

Change configuration type from exe to dll

Output and Intermediate Directory set up ideal

Output - $(SolutionDir)bin\$(Configuration)-$(Platform)\$(ProjectName)\
Intermediate - $(SolutionDir)bin-int\$(Configuration)-$(Platform)\$(ProjectName)\

Create MR.0 Project

JesterEngine will be the dll engine thingies

MR.0 will be the sandbox application

I called it that because of the One Piece Character Mr 0 and his ability to turn
into sand lol.

make sure to give MR.0 the same setup as JesterEngine

Set MR.0 as startup project

Go into solution with text editor, move MR.0 above JesterEngine.

Add JesterEngine as reference in MR.0

Properties->add->reference->JesterEngine

In JesterEngine\src\Test.h declare "void Print();""
add "__declspec(dllexport)" to the front of Print declaration.

Define Print() in Test.cpp, duh.

In MR.0, REDECLARE void Print in the Jester namespace, but this time with
__declspec(dllimport) in front

"__declspec(dllimport) void Print();"

Then use it in int main as a normal function, "Jester::Print();"

As of now, JesterEngine.dll is not copied from its output directory into MR.0's
output directory, so F5 to run doesn't work, "A dependent dll was not found"

This will be automated with premake at some point but for now just copy JesterEngine.dll
into MR.0 manually.

--------------------------------------------------------------------------------

Ok well that does it for day 1 of whatever this is, I guess I'm writing a diary
about it now.

Ew what a word... Diary...

Anyway, I'm going to bed, very tired, it's 11pm rn, got a math test tomorrow.
Gotta charge my iPad so I can take said test.

Goodnight.

---------------------------------------------------------------------------------------------------------

Ok hello again my friends it is now 5/31 and it's been awhile, I have no excuse I was just lazy lol.

But now we will continue with Video 4, Entry Point!!

----------------------------------------------------------------------------------------

The entry point to the program is currently housed inside of Mr.0.

This is not what we want as JesterEngine should be the thing that runs everything.

To start, there should be some sort of application class in the JesterEngine project.
This class will "house" the appliation that is running on the engine.

This class has a function called run that just runs the application, for now,
it is a simple while(true) loop that just goes forever.


There is also a core.h file somewhere where I'll define a bunch of macros n shit.

Making a class in the JesterEngine project comes with the problem of it being built into a .dll file, where we have to put the __declspec(dllexport/dllimport) stuff.
This is remedied by having a macro in the core.h file.

This macro will be project dependent with a #ifdef JS_DLL_BUILD, this signals to define the macro "JESTER_API" as __declspec(dllexport), and if JS_DLL_BUILD is not defined,
JESTER_API will be __declspec(dllimport)

Gonna go implement this real quick.

Also as a quick note, JS_PLATFORM_WINDOWS is also a thing to identify platform but I dont think I'll have to worry about that for a while lol.

Another quick note for myself, if you are trying to get to C/C++ options in project properties and it's not there, just make a random C++ file in the project.

Make sure to make the Application desstructor virutal so it is implemented by the actual Application not the engine.

Make a Jester.h file just in src, to be included by client applications.  

In Sandbox.cpp in MR.0, create a class called Sandbox, which inherits public Jester::Application.

To instantiate the Sandbox class, create it on the heap.  "Sandbox* sandbox = new Sandbox();"
This is because Sandbox could potentially be very big and we want to control it's lifetime explicitely.  Don't forget to delete!

In Jester folder, make EntryPoint.h, this will define the Applications main func.

This is done by writing the main func with (int argc, char** argv), and then using extern, grab a Jester::Application pointer from somewhere.

the Jester::Application pointer is grabbed from the application itself. So in Sandbox.cpp, there is a definition for Jester::CreateApplication();
it is "return new Sandbox;"
Thats it, that's all it takes.
The Compiler takes care of the rest I guess, idk how it really works lol.

----------------------------------------------------------------------
Ok That's the end of Video 4, time to do Logging, vid 5
----------------------------------------------------------------------

 Adding SPDLOG as a git submodule.

 This allows for automaticish updates as I'm not really donwloading the code directly, its referencing an existing git repository and pulling the updates from there whenever I say Update.

 to add a submodule, use cmd and in the directory you want, type "git submodule add <desired url> <desired path>"

 To implement the spdlog library, wrap it in a class to disguise it as a JesterAPI function, not just spdlog stuff.

 make a Log class

 There will be two Console objects, one for the engine and one for the client.
 These will be defined as static in the Log class.

 in the Log init function, the spdlog::set_pattern function is called.
 This sets the formatting pattern for the logging system.

 so the format Cherno did was "%^[%T] %n: %v%$", I will now decode it.

 %^ = start color range
 %$ = end color range
 I guess everything between these are colored whatever you decide
 %T = Timestamp in "H:M:S", 24h clock
 %n = Name of the console, so Client or Core
 %v = Actual text to log

 more formatting here: https://github.com/gabime/spdlog/wiki/3.-Custom-formatting

 so basically it will log something like:
 "[10:53:30] Core Logger: Jim Fucking Died."

 The full call for a console print with this set up right now is Jester::Log::getCoreLogger()->trace("whatever");
 This is very verbose and cumbersome, so were gonna put it in a bunch of macros

 #define JS_CORE_ERROR(...) ::Jester::Log::getCoreLogger()->error(__VA_ARGS__)

 This is done for the client logger as well.

--------------------------------------------------------------------------
That should be all of the stuff done for the logging system.

If you have any questions look at the fucking code you monkey.

ok on to the next video, Premake, gonna automate the fuk outta that dll copying :chungus:
--------------------------------------------------------------------------

HOW TO DOWNLOAD AND USE PREMAKE
1. donwload zip from github
2. make dir in solutiondir, slap premake5.exe in there with the LICENSE.txt
3. in the solutiondir, create premake5.lua 
4. put 'workspace "Solution"' at the top, ignore the single quotes retard
5. under that put 'architecture "x64"' because 32 bit is for losers
6. under that put configurations, debug release, dist, ect...
	- Debug: For devving
	- Release: For Devving, but fast and does losers
	- Dist: The actual distribution of the program
7. create project with same name as the one in VS.
8. use 'location "JesterEngine"' to make everything in the project relative to that path.
9. set 'kind "SharedLib"', specifies JesterEngine as dll producer thingy
10. 'language "C++"'
11. create variable for paths
	- outputdir = "%{cfg.buildcfg}-%{cfg.system}-%{cfg.architecture}"
					(debug/release) ( platform )  (      duh       )

12. 'targetdir ("bin/" .. outputdir .. "/%{prj.name})'
13. 'objdir ("bin-int/" .. outputdir .. "/%{prj.name})'
14. 'files {
		"%{prj.name}/src/**.h",
		"%{prj.name}/src/**.cpp"
     }'
15. 'include {
	 	"%{prj.name}/vendor/spdlog/include"
     }
16. filter "system:windows" basically if(system == windows) and everything underneath gets parsed if true
17. under filter set 'cppdialect "C++17"' because we are swag af.
18. 'staticruntime "On"' 
19. 'systemversion "latest"'
20. Finally the defines
	just 'defines { "macro", "macro2", ... }' yeah
21. Postbuild step to put dll into MR.0
	- 'postbuildcommands {
	       ("{COPY} %{cfg.buildtarget.relpath} ../bin/" .. outputdir .. "/MR.0")
	   }'
22. filter for configurations, debug, release etc...
	- ex. 'filer "configurations:Debug"'
	- defines: "JS_DEBUG" for debug, "JS_RELEASE" for release, "JS_DIST" for dist
	- symbols "On" for debug, optimize: "On" for release and Dist

23. project "MR.0"
	- location "MR.0"
	- kind "ConsoleApp"

	- Copy everything, get rid of DLL_BUILD define, add "JesterEngine/src" as an include and change out %{prj.name} for JesterEngine, delete postbuildcommands
	- add 'links { "JesterEngine" }'

24. include should be includedirs lol

create a .bat file with contents:

call vendor\premake5\premake5.exe vs2019
PAUSE

ALright time to write all of this out and test it.

----------------------------------------------------------------------------
Ok so I'm done with premake, I worked out a kind where i put JesterEngine as the location for MR.0, but other than that it worked fine.

It is also the next day, idk why I didn't write anymore yesterday lol

Gonna start Event system planning now.
-----------------------------------------------------------------------------

Event System:

Application needs to recieve events from the game engine/Window

Mouse move events, keyboard events, close button events, all that good stuff.

Window class sees/hears an even happen in the window and sends it to the application
The application handles it and acts accordingly.

There will be many different event classes for different kinds of events.

Yeah.

------------------------------------------------------------------------------
Ok actual writing video now.
------------------------------------------------------------------------------

Event System:
Enums to show what type it is and filter based on event type.

